#importing packages
import streamlit as st
st.set_page_config(
    page_title="Destination_Insights: GLOBE GURU",
    page_icon="✈️",
    layout="wide",
    initial_sidebar_state="expanded",
)

import base64
# Function to encode image to base64
@st.cache_data
def get_base64_image(file):
    with open(file, "rb") as f:
        data = f.read()
    return base64.b64encode(data).decode()

# Path to your image
img_file = r"D:\travel_app\styling.jpg"
img_base64 = get_base64_image(img_file)

# Custom CSS for watermark effect
page_bg_img = f'''
<style>
body {{
background-image: url("data:image/png;base64,{img_base64}");
background-size: cover;
background-repeat: no-repeat;
background-attachment: fixed;
opacity: 0.94;  
}}
</style>
'''
# Inject CSS into Streamlit app
st.markdown(page_bg_img, unsafe_allow_html=True)

# Custom CSS to control the width of the widgets
st.markdown("""
    <style>
    .stSlider [data-baseweb=slider]{
        width: 500px;
    }
    .stTextInput {
        width: 500px;
    }
    .stMultiSelect [data-baseweb="select"] {
        width: 500px;
    }
    .stSelectbox [data-baseweb="select"] {
        width: 500px;
    }    
    </style>
    """, unsafe_allow_html=True)

from openai import OpenAI
import openai

#Initializing a list to contain all of the image_urls generated by DALL-E
image_urls = []

#function to get travel options and images from gpt
def generate_options(interests, place_type, budget, travel_origin, travel_type, continents, api_key):
    # Initialize OpenAI client
    client = OpenAI(api_key=api_key)
    
    # Define the system message template
    system_message = ("You are a smart travel assistant, who helps people decide where they would like to go based on their "
                      "[budget], [interests], who are currently residing in [travel_origin], [travel_type:domestic/international], "
                      "[continents] and [place_type], give 3 options to the user and make sure to take into account the budget of the user"
                      "in context with the travel_origin include the top sights they could go to in that place with their budget,"
                      "give compelling reasons as to why they should visit the place, and include costs"
                      )
    
    # Create the user message
    user_message = (f"\n interests: {interests} \n place_type: {place_type} \n budget: {budget} \n "
                    f"travel_origin: {travel_origin} \n travel_type: {travel_type} \n continents: {continents}")
    
    # Call OpenAI API to generate options
    response = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "system", "content": system_message},
            {"role": "user", "content": user_message}
        ],
        temperature=0.9,
        max_tokens=3000,
        top_p=1,
        frequency_penalty=0,
        presence_penalty=0
    )
    
    # Extract and return the response content
    result=response.choices[0].message.content

    response = client.chat.completions.create(
    model="gpt-3.5-turbo-1106",
    messages=[
    {
    "role": "system",
    "content": "You are a helpful assistant that creates DALL-E prompts based on"
    "itineraries. The prompts should be short. Create one prompt for All the 3 options given to users for "
    "possible places they could visit. The DALL-E prompt should be separated by \"|\"."
    },
    {
    "role": "user",
    "content": result
    }
    ],
    temperature=0.7,
    max_tokens=1024,
    top_p=1,
    frequency_penalty=0,
    presence_penalty=0
    )

    dalle_prompts_list = response.choices[0].message.content.split('|')

    for prompt in dalle_prompts_list:
        response = client.images.generate(
        model="dall-e-3",
        prompt=prompt,
        size="1024x1024",
        quality="standard",
        n=1
        )
        image_urls.append(response.data[0].url)
    return result

#main body of the page
def Insight_page():
    api_key=""
    title_template = """
    <div style="background-color:#2f3e46; padding:5px;">
    <h1 style="color:#cad2c5">GLOBE GURU</h1>
    </div>
    <hr>
    """
    st.sidebar.title("MENU")
    st.sidebar.image("logo.jpg",use_column_width=True)
    st.markdown(title_template,unsafe_allow_html=True)
    st.header("DON'T HAVE A FIXED DESTINATION IN MIND?")
    st.subheader("WE ARE HERE TO HELP...")
    st.markdown("<hr>",unsafe_allow_html=True)
    col1,col2,col3=st.columns(3)
    with col1:
        #getting interest of users using multiselectbox
        interests = st.multiselect('Select your interests:',
        ['Art', 'History', 'Culture', 'Heritage', 'Culinary Experiences', 'Adventure', 'Nature & Wildlife', 'Outdoor Activities', 'Architecture', 'Music & Performing Arts', 'Sports & Recreation', 'Wellness & Spa', 'Shopping & Markets', 'Nightlife & Entertainment', 'Festivals & Events', 'Photography', 'No preferences'])
        
        #getting the kind of place they want to visit from user
        place_type = st.multiselect(
        'What type of place do you want to visit?',
        ['Beach Area', 'Mountain Area', 'Countryside', 'City', 'Hidden Gems'])

        #getting input of where the user is travelling from
        travel_origin = st.text_input('Where are you traveling from?')      

    with col2:
        #Currency Selection
        currency = st.selectbox(
            'Choose your currency:',
            ['USD - Dollars', 'EUR - Euros', 'GBP - Pounds', 'INR - Indian Rupees']
        )

        # Set budget ranges based on the selected currency
        if currency == 'USD - Dollars':
            min_budget = 100
            max_budget = 25000
            default_budget = 1000
            step = 100
        elif currency == 'EUR - Euros':
            min_budget = 100
            max_budget = 25000
            default_budget = 1000
            step = 100
        elif currency == 'GBP - Pounds':
            min_budget = 100
            max_budget = 25000
            default_budget = 1000
            step = 100
        elif currency == 'INR - Indian Rupees':
            min_budget = 5000
            max_budget = 1000000
            default_budget = 10000
            step = 5000

        # Create slider for users to enter their budget
        budget = st.slider(
            f'Select your budget in {currency.split(" - ")[1]}:',
            min_value=min_budget,
            max_value=max_budget,
            value=default_budget,
            step=step
        )

        # Store the budget along with the currency in a single variable
        budget_with_currency = {'budget': budget, 'currency': currency.split(" - ")[1]}
        # Travel preference: Domestic or International
        travel_type = st.radio(
        'Do you want to travel domestic or international?',
        ['Domestic', 'International'])
    
    # If the user selects international, show a multiselect box for continents
    if travel_type == 'International':
        continents = st.multiselect(
            'Select the continents you would like to visit:',
            ['Africa', 'Asia', 'Europe', 'North America', 'South America', 'Australia', 'Antarctica'])
    else:
        continents='N/A'
    
    #Calling the generate_options function
    if st.button('Get Travel Options'):
        st.markdown("<hr>",unsafe_allow_html=True)
        if interests and place_type and budget and currency and travel_origin and travel_type and continents:
            with st.spinner('Generating Options...'):
                try:
                    answer = generate_options(interests, place_type, budget_with_currency, travel_origin, travel_type, continents, api_key)
                    st.write('### HERE ARE A FEW OPTIONS')
                    st.write(answer)
                    st.markdown("<hr>",unsafe_allow_html=True)
                    col1,col2,col3=st.columns(3)
                    with col1:
                        st.subheader(f"City in option:{1}")
                        st.image(image_urls[1], use_column_width=True)
                        st.markdown("<hr>",unsafe_allow_html=True)
                    with col2:
                        st.subheader(f"City in option:{2}")
                        st.image(image_urls[2], use_column_width=True)
                        st.markdown("<hr>",unsafe_allow_html=True)
                    with col3:
                        st.subheader(f"City in option:{3}")
                        st.image(image_urls[3], use_column_width=True)
                        st.markdown("<hr>",unsafe_allow_html=True)
                    st.write("If you like any of these options feel free to navigate to the **Build_Itinerary** page to get a customized Itinerary based on your preferences")
                    st.write("If you are not happy with the options provided, feel free to change your parameters and re-submitting to get more **insights**")
                except Exception as e:
                    st.error(f"We Ran into issues fetching options for you... \n\n Please Try again later...\n\n Error faced: {e}")
        else:
            st.error('Please provide all the required inputs.')
        
if __name__=="__main__":
    Insight_page()
